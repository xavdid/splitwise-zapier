#! /usr/bin/env node

require('dotenv').config()

const rollup = require('rollup')
const commonjs = require('rollup-plugin-commonjs')
const nodeResolve = require('rollup-plugin-node-resolve')

const exec = require('child_process').execSync

const replace = require('replace-in-file')

const tempFileName = 'temp.js'

// helpers
const genConfig = (key) => {
  return {
    files: './bundle.js',
    from: `<${key}>`,
    to: process.env[key]
  }
}

const oauthString = (key) => {
  return `OAUTH_CONSUMER_${key.toUpperCase()}`
}

// set up for editing
exec(`cp zapier.js ${tempFileName}`)

// module is just for tests
replace({
  files: tempFileName,
  from: 'module.exports',
  to: 'var Zap'
})
  .then(() => {
    return rollup
      .rollup({
        entry: tempFileName,
        plugins: [
          nodeResolve(),
          commonjs()
        ]
      })
  })
  // build bundle
  .then(bundle => bundle.write({
    dest: 'bundle.js',
    format: 'cjs'
  }))
  // don't need to get result of previous action
  .then(() => replace(genConfig(oauthString('public'))))
  .then(() => replace(genConfig(oauthString('secret'))))
  // zapier can't handle const yet
  .then(() => replace({
    files: 'bundle.js',
    from: /(const|let) /g,
    to: 'var '
  }))
  .then(() => { exec(`rm ${tempFileName}`) })
  .catch(err => console.log(err.stack))

